# -*- coding: utf-8 -*-
"""EDA_DATA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pFyPJDxCMXNyQ3ri-EHVEzlSkImeBnH4

**Load And Preprocess The Data**
"""

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/MyDrive/data
!ls

import pandas as pd

#read data
clickpost = pd.read_csv("clickposts_data.csv")
reorders = pd.read_csv("reorders_data.csv")
#drop null column
clickpost = clickpost.drop(columns=['Unnamed: 0']).reset_index()
reorders = reorders.drop(columns=['Unnamed: 0']).reset_index()


print(clickpost.shape)
print(reorders.shape)

clickpost.columns

clickpost.head(5)

reorders.columns

reorders.head(5)

df = pd.merge(clickpost, reorders, on='post_id',  how='outer')
df.head(25)

print(df.shape)

final_df = df.drop_duplicates(subset='post_id')

print(final_df.shape)

final_df.head()

# get the unique post ids first 
# then enumerate them and update click_pose_count from the original df with duplitcate ids per click

import numpy as np


unique_id_list = np.unique(final_df['post_id'])
for id in unique_id_list[0:10]:
  print(id)

# for each ID

for id in unique_id_list:
  id_df = df[df['post_id']==id]
  total_clicks = np.sum(id_df['click_post_count'])
  # get the total number of clicks
  # and replace it in the new df
  final_df.loc[final_df['post_id']==id, 'click_post_count'] = total_clicks

# remove the duplicate columns created
final_df.columns

final_df = final_df.drop(columns=['index_x', 'index_y'])

final_df = final_df.reset_index()

final_df.tail(5)

clean_data = final_df[['click_post_count', 'tag']]
clean_data.head(5)

# how many orders and how many urgent reorders.
import seaborn as sns

sns.set(rc={'figure.figsize':(20,15)})
clean_data['tag'].value_counts().plot(kind='bar',fontsize=15)

# remove outliers so that plots are nicer

clean_data = clean_data[clean_data.click_post_count < clean_data.click_post_count.quantile(.85)]

from matplotlib import pyplot as plt
import seaborn as sns

sns.displot(clean_data, kde=True, height=8.27, aspect=11.7/8.27)

sns.jointplot(x='click_post_count', y='tag', data=clean_data)

sns.stripplot(x="tag", y="click_post_count", data=clean_data, jitter=False)

sns.boxplot(x="tag", y="click_post_count", data=clean_data)

sns.violinplot(x="tag", y="click_post_count", data=clean_data)

urgent_reorder_data = clean_data[clean_data['tag']=='urgent-reorder']['click_post_count']
reorder_data = clean_data[clean_data['tag']=='reorder']['click_post_count']

# get the datas as seperate entities to do a ttest

urgent_reorder_data.shape, reorder_data.shape

from scipy.stats import ttest_ind

output = ttest_ind(urgent_reorder_data, reorder_data)
output

np.mean(urgent_reorder_data)

np.mean(reorder_data)

sns.displot(urgent_reorder_data, kde=True, height=8.27, aspect=11.7/8.27)

sns.displot(reorder_data, kde=True, height=8.27, aspect=11.7/8.27)

# the reorder data has a significant increase in mean.
# the end.

"""**Date and Time**"""

import pandas as pd
df = final_df
df[["reorder_time", "post_publish_time", "post_retire_time"]] = df[["reorder_time", "post_publish_time", "post_retire_time"]].apply(pd.to_datetime)
df

df.describe()

"""**Total Duration**"""

df['Day'] = df['post_publish_time'].dt.day
# month
df['Month'] = df['post_publish_time'].dt.month
# year
df['Year'] = df['post_publish_time'].dt.year
# hour
df['Start_hour'] = df['post_publish_time'].dt.hour
# minute
df['Start_minute'] = df['post_publish_time'].dt.minute
# second
df['Start_second'] = df['post_publish_time'].dt.second
# Monday is 0 and Sunday is 6
df['Start_weekday'] = df['post_publish_time'].dt.weekday
# week of the year
df['Start_week_of_year'] = df['post_publish_time'].dt.week
# duration
df['Duration'] = df['post_retire_time']-df['post_publish_time']

from datetime import timedelta

df['Duration_days'] = df['Duration']/timedelta(days=1)
df['Duration_minutes'] = df['Duration']/timedelta(minutes=1)
df['Duration_seconds'] = df['Duration']/timedelta(seconds=1)
df

from matplotlib import pyplot as plt
import seaborn as sns
sns.set(rc={'figure.figsize':(20,15)})
sns.displot(df['Duration_minutes'], kde=True,  height=8.27, aspect=11.7/8.27)

from matplotlib import pyplot as plt
import seaborn as sns

sns.displot(df['Duration_days'], kde=True,  height=8.27, aspect=11.7/8.27)

# how many orders and how many urgent reorders.

df['Start_hour'].value_counts().plot(kind='bar')

# how many orders and how many urgent reorders.

df['Day'].value_counts().plot(kind='bar')

# how many orders and how many urgent reorders.

df['Start_weekday'].value_counts().plot(kind='bar')

df1 = df[['click_post_count', 'Duration_days']]
sns.pairplot(df1, height=8.27, aspect=11.7/8.27, palette='Accent')

"""**Reorder Duration**"""

import pandas as pd
df = final_df
df[["reorder_time", "post_publish_time", "post_retire_time"]] = df[["reorder_time", "post_publish_time", "post_retire_time"]].apply(pd.to_datetime)
df

df['Day'] = df['reorder_time'].dt.day
# month
df['Month'] = df['reorder_time'].dt.month
# year
df['Year'] = df['reorder_time'].dt.year
# hour
df['Start_hour'] = df['reorder_time'].dt.hour
# minute
df['Start_minute'] = df['reorder_time'].dt.minute
# second
df['Start_second'] = df['reorder_time'].dt.second
# Monday is 0 and Sunday is 6
df['Start_weekday'] = df['reorder_time'].dt.weekday
# week of the year
df['Start_week_of_year'] = df['reorder_time'].dt.week
# duration
df['Duration'] = df['post_retire_time']-df['reorder_time']

from datetime import timedelta

df['Duration_days'] = df['Duration']/timedelta(days=1)
df['Duration_minutes'] = df['Duration']/timedelta(minutes=1)
df['Duration_seconds'] = df['Duration']/timedelta(seconds=1)
df

from matplotlib import pyplot as plt
import seaborn as sns
df.dropna()
sns.displot(df['Duration_minutes'], kde=True,  height=8.27, aspect=11.7/8.27).set(xlim=(0))

from matplotlib import pyplot as plt
import seaborn as sns

sns.displot(df['Duration_seconds'], kde=True, height=8.27, aspect=11.7/8.27).set(xlim=(0))

from matplotlib import pyplot as plt
import seaborn as sns

sns.displot(df['Duration_days'], kde=True,  height=8.27, aspect=11.7/8.27).set(xlim=(0))

# how many orders and how many urgent reorders.

df['Start_hour'].value_counts().plot(kind='bar')

# how many orders and how many urgent reorders.

df['Day'].value_counts().plot(kind='bar')

# how many orders and how many urgent reorders.

df['Start_weekday'].value_counts().plot(kind='bar')

df1 = df[['click_post_count', 'Duration_days']]
sns.pairplot(df1, height=8.27, aspect=11.7/8.27, palette='Accent').set(ylim=(0), xlim=(0))

"""**Top 10 Posts**"""

temp = df.sort_values('click_post_count').tail(10)
temp

temp['tag'].value_counts().plot(kind='bar')

temp['click_post_count'].plot(kind='bar')